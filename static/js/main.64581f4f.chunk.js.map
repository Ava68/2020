{"version":3,"sources":["images/cover-dark.svg","images/cover-light.svg","components/HeaderComp.js","components/FooterComp.js","components/Cover.js","components/Prizes.js","components/HomeComp.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Component","Cover","props","useState","mode","setMode","className","style","backgroundColor","class","position","type","id","for","onClick","color","src","coverDark","coverLight","alt","xmlns","fill","viewBox","height","width","marginRight","d","Prizes","href","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,wC,oBCA3CD,EAAOC,QAAU,IAA0B,yC,mPCGtBC,YCAAA,Y,mDCyDNC,MAvDf,SAAeC,GAAQ,IAAD,EACIC,mBAAS,QADb,mBACbC,EADa,KACPC,EADO,KAEpB,OACE,yBACEC,UAAU,QACVC,MACW,SAATH,EACI,CAAEI,gBAAiB,YACnB,CAAEA,gBAAiB,YAIzB,yBACEC,MAAM,+BACNF,MAAO,CAAEG,SAAU,aAEnB,2BACEC,KAAK,WACLF,MAAM,uBACNG,GAAG,kBAEL,2BACEH,MAAM,uBACNI,IAAI,gBACJC,QAAS,WACWT,EAAQ,SACPA,EAAV,UAATD,EAA2B,OAAkB,UAE/CG,MAAgB,SAATH,EAAkB,CAAEW,MAAO,YAAe,CAAEA,MAAO,YAP5D,UAaF,yBACEC,IAAc,SAATZ,EAAkBa,IAAYC,IACnCC,IAAI,mBAEN,4BAAQP,GAAG,sBACT,yBACEH,MAAM,OACNW,MAAM,6BACNC,KAAK,OACLC,QAAQ,oBACRf,MAAO,CAAEgB,OAAQ,OAAQC,MAAO,OAAQC,YAAa,QAErD,0BAAMC,EAAE,gOACR,0BAAMA,EAAE,uLATZ,yBCWSC,G,8KAhDP,OACI,yBAAKrB,UAAU,WACf,yBAAKA,UAAU,OACrB,uBAAGM,GAAG,MAAK,yCACX,2BAAG,4CACH,6BACA,6BACA,6BACA,yBAAKN,UAAU,OACb,0CACA,yBAAKA,UAAU,MACb,+CAGJ,6BACA,6BACA,6BACA,6BACA,yBAAKA,UAAU,OACb,+BACE,4BACE,4BAAI,yBAAKA,UAAU,YACjB,0CACA,yBAAKA,UAAU,IACb,gDAIJ,4BAAI,wBAAIA,UAAU,SAElB,4BAAI,yBAAKA,UAAU,aACjB,0CACA,yBAAKA,UAAU,IACb,mDAMV,6BACA,6BACA,uBAAGsB,KAAK,IAAItB,UAAU,OAAtB,8B,GA3CeN,cCaN6B,E,uKATX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALW7B,aCQJ8B,E,uKAJX,OAAO,kBAAC,EAAD,U,GAFO9B,aCIE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.64581f4f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cover-dark.e91a6ecc.svg\";","module.exports = __webpack_public_path__ + \"static/media/cover-light.b248800a.svg\";","import React, {Component} from \"react\";\r\nimport { render } from \"@testing-library/react\";\r\n\r\nclass Header extends Component{\r\n    render(){\r\n        return(\r\n                <div>\r\n                <h1>This is the Header</h1>\r\n                <p>deep</p>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React, {Component} from \"react\";\r\nimport { render } from \"@testing-library/react\";\r\n\r\nclass Footer extends Component{\r\n    render(){\r\n        return(\r\n            <h1>This is the Footer</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","import React, { useState } from \"react\";\r\nimport coverDark from \"../images/cover-dark.svg\";\r\nimport coverLight from \"../images/cover-light.svg\";\r\nimport \"../css/Cover.css\";\r\n\r\nfunction Cover(props) {\r\n  const [mode, setMode] = useState(\"dark\");\r\n  return (\r\n    <div\r\n      className=\"cover\"\r\n      style={\r\n        mode === \"dark\"\r\n          ? { backgroundColor: \" #1e1e1e\" }\r\n          : { backgroundColor: \"#fcfcfc\" }\r\n      }\r\n    >\r\n        \r\n      <div\r\n        class=\"custom-control custom-switch\"\r\n        style={{ position: \"absolute\"}}\r\n      >\r\n        <input\r\n          type=\"checkbox\"\r\n          class=\"custom-control-input\"\r\n          id=\"customSwitch1\"\r\n        />\r\n        <label\r\n          class=\"custom-control-label\"\r\n          for=\"customSwitch1\"\r\n          onClick={() => {\r\n            mode === \"dark\" ? setMode(\"light\") : setMode(\"light\");\r\n            mode === \"light\" ? setMode(\"dark\") : setMode(\"light\");\r\n          }}\r\n          style={mode === \"dark\" ? { color: \" #fcfcfc\" } : { color: \"#1e1e1e\" }}\r\n        >\r\n          Light\r\n        </label>\r\n      </div>\r\n    \r\n      <img\r\n        src={mode === \"dark\" ? coverDark : coverLight}\r\n        alt=\"Reva Hack 2020\"\r\n      />\r\n      <button id=\"devfolio-apply-now\">\r\n        <svg\r\n          class=\"logo\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          fill=\"#fff\"\r\n          viewBox=\"0 0 115.46 123.46\"\r\n          style={{ height: \"24px\", width: \"24px\", marginRight: \"8px\" }}\r\n        >\r\n          <path d=\"M115.46 68a55.43 55.43 0 0 1-50.85 55.11S28.12 124 16 123a12.6 12.6 0 0 1-10.09-7.5 15.85 15.85 0 0 0 5.36 1.5c4 .34 10.72.51 20.13.51 13.82 0 28.84-.38 29-.38h.26a60.14 60.14 0 0 0 54.72-52.47c.05 1.05.08 2.18.08 3.34z\" />\r\n          <path d=\"M110.93 55.87A55.43 55.43 0 0 1 60.08 111s-36.48.92-48.58-.12C5 110.29.15 104.22 0 97.52l.2-83.84C.38 7 5.26.94 11.76.41c12.11-1 48.59.12 48.59.12a55.41 55.41 0 0 1 50.58 55.34z\" />\r\n        </svg>\r\n        Apply with Devfolio\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cover;\r\n","import React, {Component} from \"react\";\r\nimport \"../css/Prizes.css\";\r\n\r\n\r\nclass Prizes extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"top-top\">\r\n            <div className=\"top\">\r\n      <p id=\"pp\"><h1>Prizes &</h1></p>\r\n      <p><h1> Incentives</h1></p>\r\n      <br/>\r\n      <br/>\r\n      <br/>\r\n      <div className=\"mid\">\r\n        <h6>1 ST PLACE</h6>\r\n        <div className=\"mo\">\r\n          <h1>₹ 25,000</h1>\r\n        </div>\r\n      </div>\r\n      <br/>\r\n      <hr/>\r\n      <br/>\r\n      <br/>\r\n      <div className=\"bot\">\r\n        <table>\r\n          <tr>\r\n            <td><div className=\"bot-left\">\r\n              <h6>2 ND PLACE</h6>\r\n              <div className=\"\">\r\n                <h1>₹ 15,000</h1>\r\n              </div>\r\n            </div>\r\n            </td>\r\n            <td><hr className=\"hrv\"/>\r\n            </td>\r\n            <td><div className=\"bot-right\">\r\n              <h6>3 RD PLACE</h6>\r\n              <div className=\"\">\r\n                <h1>₹ 10,000</h1>\r\n              </div>\r\n            </div></td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n      <br/>\r\n      <br/>\r\n      <a href=\"#\" className=\"but\">CHECK OUR GIUDELINES</a>\r\n    </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Prizes;\r\n","import React, { Component } from \"react\";\r\nimport Header from \"./HeaderComp\";\r\nimport Footer from \"./FooterComp\";\r\nimport Cover from \"./Cover\";\r\nimport Prizes from \"./Prizes\";\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Cover />\r\n        <Prizes />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, {Component} from 'react';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\n\r\nimport Home from \"./components/HomeComp\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return <Home />;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}